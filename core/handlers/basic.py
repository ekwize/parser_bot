from aiogram import Bot, Router, F
import time
from aiogram.types import Message, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from core.filters.filter import SymbolFilter
from core.parser.parseavito import ParseAvito
from core.parser.parsewb import ParseWB
from core.utils.xlsx_utils import create_excel_file
from core.keyboards.inline import stores_kb
from core.keyboards.reply import start_kb
from core.db1 import get_coins, update_coins
from sqlalchemy.ext.asyncio import async_sessionmaker, AsyncSession
from core.states import ClientState, StoreState

router = Router()

@router.message(Command(commands=['start', 'run']))
async def get_start(message: Message, state: FSMContext, sessionmaker: async_sessionmaker[AsyncSession]):
    START_TEXT = """

–Ø <b>–ø–∞—Ä—Å–µ—Ä</b>
–ò –≤–æ—Ç —á—Ç–æ —è —É–º–µ—é üëá

    """
    keyboard = start_kb()

    # await register_user(user_id=message.from_user.id, 
    #                     username=message.from_user.username, 
    #                     coins=100, 
    #                     sessionmaker=sessionmaker)
    
    await message.answer(f'–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!' + START_TEXT,
                        reply_markup=keyboard)
    
    await state.set_state(ClientState.START_ORDER)

@router.message(F.text.lower() == "–ø–∞—Ä—Å–∏–Ω–≥ –º–∞–≥–∞–∑–∏–Ω–∞")
async def parse_store(message: Message, state: FSMContext):
    keyboard = stores_kb()
    await message.answer('–í—ã–±–µ—Ä–∏ —Å–∞–π—Ç –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞', 
                        reply_markup=keyboard)
    await state.set_state(ClientState.PARSE_SELECTED)

@router.message(F.text.lower() == "–ø–æ–º–æ—â—å")
async def help(message: Message):
    HELP_TEXT = """

    <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:</b>
    1)–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/start</b>
    2)–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–∞—Ä—Å–∏–Ω–≥ –º–∞–≥–∞–∑–∏–Ω–∞"
    3)–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–≥–∞–∑–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    4)–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞

    """
    await message.answer(HELP_TEXT)
    
@router.message(SymbolFilter('/'), (StoreState.AVITO_SELECTED))
async def parse_avito(message: Message, bot: Bot, sessionmaker: async_sessionmaker[AsyncSession]):
    user_id = message.from_user.id
    
    await update_coins(user_id=user_id,
                       sessionmaker=sessionmaker)
    
    coins = await get_coins(user_id=user_id,
                            sessionmaker=sessionmaker)

    PRE_TEXT = f"""
    –§–∞–π–ª —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ)

–û—Å—Ç–∞–ª–æ—Å—å <b>{coins}</b> –º–æ–Ω–µ—Ç –∏–∑ 100 –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
    
    """
    await message.answer(PRE_TEXT)

    chat_id = message.chat.id
    query = message.text
    parser = ParseAvito()
    products = parser.get_data_with_selenium(query)

    file = await create_excel_file(products)
    document = BufferedInputFile(file, filename=f'{query}.xlsx')
    await bot.send_document(chat_id, document)

@router.message(SymbolFilter('/'), StateFilter(StoreState.WB_SELECTED))
async def parse_wb(message: Message, bot: Bot, sessionmaker: async_sessionmaker[AsyncSession]):
    user_id = message.from_user.id

    await update_coins(user_id=user_id,
                        sessionmaker=sessionmaker)
    
    coins = await get_coins(user_id=user_id,
                            sessionmaker=sessionmaker)
    
    PRE_TEXT = f"""
    –§–∞–π–ª —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ)

–û—Å—Ç–∞–ª–æ—Å—å <b>{coins}</b> –º–æ–Ω–µ—Ç –∏–∑ 100 –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.
    
    """
    await message.answer(PRE_TEXT)
    chat_id = message.chat.id
    query = message.text
    parser = ParseWB()
    products = parser.parse(query)
    file = await create_excel_file(products)
    document = BufferedInputFile(file, filename=f'{query}.xlsx')
    time.sleep(1)
    await bot.send_document(chat_id, document)
    







